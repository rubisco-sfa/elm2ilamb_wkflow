#!/bin/bash


# Author: Min Xu
# @ORNL

# Modification history:
# Required software: NCO toolkit 


cleanup() {
    exitcode=$?
    printf 'error condition hit\n' 1>&2
    printf 'exit code returned: %s\n' "$exitcode"
    printf 'the command executing at the time of the error was: %s\n' "$BASH_COMMAND"
    printf 'command present on line: %d\n' "${BASH_LINENO[0]}"
    # Some more clean up code can be added here before exiting
    exit $exitcode
}


trap cleanup ERR

function nctypget { ncks --trd -m -v ${1} ${2} | grep -E -i "^${1}: type" | cut -f 3 -d ' ' | cut -f 1 -d ',' ; }


# defaults:

ilamb_fields=0        # define varaible list for ILAMB
convert_to_cmip=0     # 0 - not cmorize outputs; 1 - cmorize outputs 
nconcurrent=0         # number of concurrent processes to run time serialzation, 0: equal to the number of total vairables, > 0 use it
add_fixed_flds=0      # default, the fx fields won't be generated
year_align=0
use_ncremap=0
use_cremap3=0
use_softlnk=0
use_ncclimo=0
use_pyreshaper=0
skip_genmap=0
skip_rename=0
no_gen_ts=0

mydebug=0

Script=`readlink -f $0`
SrcDir=`dirname $Script`


# define colors
CR_RED='\033[0;31m'
CR_GRN='\033[0;32m'
CR_NUL='\033[0m'
FTBOLD='\033[1m'
FTNORM='\033[0m'

# print usage
print_usage () {


   CmdNam=`basename $0`

   echo -e ""
   echo -e ""
   echo -e "\e[1mUsage:\e[0m \e[32m$CmdNam\e[0m --caseid[-c] --year_range[-y] --align_year[-a] --caseidpath[-i] --outputpath[-o] 
                  --experiment[-e] --model[-m] --numcc [--cmip] [--ilamb] [--addfxflds] --srcgrid[-s] --dstgrid[-g] -v --no-gents
                  --skip-genmap --ncclimo|--pyreshaper --ncremap|--cremap3|--linkfil"

   echo -e ""
   echo -e ""

   echo -e "         \e[1m--caseid, -c           \e[0m: the case name"
   echo -e "         \e[1m--year_range, -y       \e[0m: the year range of the simulations that is used in the name construction of the output files.
                                  Format: YYYY-YYYY, i.e. first year and last year. When it is combined with the --align_year, the model years
                                  between first_year+align_year to last_year+align_year" are processed
   echo -e "         \e[1m--year_align, -a       \e[0m: the year used to align the model year and real years set in the --year_range, it equals
                                  model year minus real year"
   echo -e "         \e[1m--caseidpath, -i       \e[0m: the directory of outputs from atm and lnd components, please provide two directory names seperated 
                                  by comma if they are different"
   echo -e "         \e[1m--outputpath, -o       \e[0m: the directory for the outputs generated by this script"
   echo -e "         \e[1m--experiment, -e       \e[0m: the experiment name following CMIP conventions used in the name construction of the output files"
   echo -e "         \e[1m--model, -m            \e[0m: the model name, used in the name construnction of the output files and the subdirectory name under outputpath"
   echo -e "         \e[1m--skip-genmap          \e[0m: 0 means not to skip map generation, positive integer number is to skip it and use mapXXXX.nc instead"
   echo -e "         \e[1m--srcgrid, -s          \e[0m: if do remapping, source grid description in the SCRIP format is required"
   echo -e "         \e[1m--dstgrid, -g          \e[0m: if do remapping, target grid description in the SCRIP format is required"
   echo -e "         \e[1m--numcc                \e[0m: number of concurrent processes to do time serialzation. if 0 or not set use the total number of variables"
   echo -e "         \e[1m--no-gen-ts            \e[0m: switch of not generating time serialization (i.e. the ts files were generated before)"
   echo -e "         \e[1m--ncclimo|pyreshaper   \e[0m: switch of time serialization methods either using ncclimo or PyReshaper"
   echo -e "         \e[1m--ncreamp|creamp3      \e[0m: switch of remapping methods either using ncremap or conv_remap3, cannot be used together or with -linkfil"
   echo -e "         \e[1m--linkfil              \e[0m: switch to link the original to remapped files instead of actual remapping"
   echo -e "         \e[1m--cmip                 \e[0m: switch to rewrite model outputs following CMIP conventions"
   echo -e "         \e[1m--skip_rename          \e[0m: switch to skip renaming for cmip conversion (the renaming was done in a previous run"
   echo -e "         \e[1m--ilamb                \e[0m: switch to rewrite the variables for analysis in ILAMB following CMIP conventions"
   echo -e "         \e[1m--addfxflds            \e[0m: switch to rewrite the two fixed datasets 'sftlf' and 'areacella' and exit. Default they won't be written out"

   echo -e ""
   echo -e ""
}

# command line arguments:
parse_options () {
     longargs=ilamb,cmip,addfxflds,ncclimo,pyreshaper,ncremap,cremap3,linkfil,no-gen-ts,skip-rename,skip-genmap:,caseid:,year_range:,year_align:,caseidpath:,outputpath:,experiment:,model:,numcc:,srcgrid:,dstgrid:,morevar:
     shrtargs=hvc:T:y:a:i:o:e:m:s:g:
     CmdLine=`getopt -s bash  -o  $shrtargs --long $longargs -- "$@"`
     
     if [[ $? != 0 ]]; then 
       echo "Terminating..." >/dev/stderr
       exit -1
     fi
     
     eval set -- "$CmdLine"
     
     while true; do
          case "$1" in
             -h) echo $printusage; exit 1; shift ;;
             -v) set -x; mydebug=1; shift ;;
             -c|--caseid)
                     caseid=$2
             	echo  -e "The case name: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             -y|--year_range)
                     year_range=$2
                     if [[ $2 == *'-'* ]]; then
                         yearsplit=(`echo $2 | sed 's/-/ /g'`)
             
                         stryear=${yearsplit[0]}
                         endyear=${yearsplit[1]}
                     else
                         echo -e "${CR_RED}Error: year range (-y|--year_range) should be in the format of YYYY-YYYY${CR_NUL}"
                         exit -1
                     fi
             	echo -e "The simulated year range: ${CR_GRN}$2${CR_NUL}"; shift 2 ;; 
             -a|--year_align)
                     year_align=$2
                echo -e "The alignment year: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             -s|--srcgrid)
                     src_grd=$2
                echo -e "The source grid: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             -g|--dstgrid)
                     dst_grd=$2
                echo -e "The destination grid: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             -i|--caseidpath)
                     caseidpath=$2
                     if [[ $caseidpath =~ .*,.* ]]; then
                        atmpath="$(echo $caseidpath | cut -d',' -f1)" 
                        lndpath="$(echo $caseidpath | cut -d',' -f2)" 

                        atmpath=`readlink -f $atmpath`
                        lndpath=`readlink -f $lndpath`
                     else
                        caseidpath=`readlink -f $2`
                        atmpath=$caseidpath 
                        lndpath=$caseidpath
                     fi 
             	echo -e "The directory of the input LND results: ${CR_GRN}$lndpath${CR_NUL}"
             	echo -e "The directory of the input ATM results: ${CR_GRN}$atmpath${CR_NUL}"; shift 2 ;;
             -o|--outputpath)
                     outputpath=`readlink -f $2`
     		echo -e "The output directory: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             -e|--experiment)
                     experiment=$2
     		echo -e "The experiment name: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             -m|--model)
                     model=$2
     		echo -e "The model name: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             --numcc)
                     nconcurrent=$2
     		echo -e "Number of concurrent processes: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             --skip-genmap)
                     skip_genmap=$2
     		echo -e "skip_genmap: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             --morevars)
                      more_vars=$2
     		echo -e "more vars: ${CR_GRN}$2${CR_NUL}"; shift 2 ;;
             --no-gen-ts)
                     no_gen_ts=1;       shift ;;
             --ilamb)
                     ilamb_fields=1;    shift ;;
             --cmip)
                     convert_to_cmip=1; shift ;;
             --addfxflds)
                     add_fixed_flds=1;  shift ;;
             --ncclimo)
                     use_ncclimo=1;     shift ;;
             --pyreshaper)
                     use_pyreshaper=1;  shift ;;
             --ncremap)
                     use_ncremap=1;     shift ;;
             --cremap3)
                     use_cremap3=1;     shift ;;
             --linkfil)
                     use_softlnk=1;     shift ;;
             --skip-rename)
                     skip_rename=1;     shift ;;
             --) shift; break ;;
             *) echo "Internal error!"; exit 1 ;;
         esac
     done


     # checking the needed parameters
     if [[ -z ${caseidpath+x} ]]; then
         echo -e "${CR_RED}Please provide input data directory by -i|--caseidpath${CR_NUL}"
         exit 1
     fi

     if [[ -z ${outputpath+x} ]]; then
         echo -e "${CR_RED}Please provide output data directory by -o|--outputpath${CR_NUL}"
         exit 1
     fi
     
     if [[ ! -f $SrcDir/tool/clm_to_mip && $convert_to_cmip == 1 ]]; then
        echo -e "${CR_RED}Error: clm_to_mip is needed for converting model outputs following cmip conventions${CR_NUL}" 
        exit -1
     fi

     # check ts options
     if [[ $use_ncclimo == 0 && $use_pyreshaper == 0 ]]; then
        echo -e "${CR_GRN}Time serialization option is not specified, use ncclimo as default${CR_NUL}"
        use_ncclimo=1
     
     elif [[ $use_ncclimo == 1 && $use_pyreshaper == 1 ]]; then
        echo -e "${CR_RED}Error: --ncclimo and --pyreshaper cannot be used together${CR_NUL}"
        exit -1
     fi
     
     #check remap options
     if [[ $use_ncremap == 0 && $use_cremap3 == 0 ]]; then
        skip_remap=1
     #-elif [[ $use_ncremap == 1 && $use_cremap3 == 1 ]]; then
     elif [[ $((use_ncremap+use_cremap+use_softlnk)) -gt 1 ]]; then
        echo -e "${CR_RED}Error: --ncremap and --cremap3 and --linkfil cannot be used together${CR_NUL}"
        exit -1
     else
        skip_remap=0
     fi
     
     if [[ ($skip_remap == 0 || $add_fixed_flds == 1) && (-z ${src_grd+x} || -z ${dst_grd+x}) ]]; then
         if [[ $use_softlnk == 1 ]]; then
            echo -e "${CR_GRN} no remapping needed"

         else
            echo -e "${CR_RED}Error: remapping needs the srcgrd and dstgrd, please provided them by -s and -d respectively${CR_NUL}"
            exit -1
         fi
     fi
}


time_shift (){

difyear=$1
cmordir=$2

cd $cmordir
for cf in *.nc; do
   echo $cf
   /bin/rm -f cmortmp.nc
   ncap2 -s "time_bounds=time_bounds+$(($difyear*(-365))); time=time_bounds(:,1);" $cf cmortmp.nc
   /bin/mv -f cmortmp.nc $cf
done
}

args="$@"

#print_usage
if [[ $# == 0 ]]; then
   print_usage; exit 1
else
   parse_options $args
fi

if [[ $? != 0 ]]; then
   echo "Interal error"; exit 1
fi

#directory preparation
if [[ ! -d $outputpath ]]; then
   mkdir -p $outputpath
fi

if [[ ! -d $outputpath/$caseid ]]; then
   mkdir -p $outputpath/$caseid
fi



DATA=$outputpath/$caseid
drc_inp=$caseidpath
drc_out=${DATA}/org # Native grid output directory
drc_rgr=${DATA}/rgr # Regridded output directory
drc_tmp=${DATA}/tmp # Temporary/intermediate-file directory
drc_map=${DATA}/map # Map directory
drc_log=${DATA}/log # Log directory

drc_fix=${drc_rgr}/fx   # CMOR directory


if [[ ! -d $drc_out ]]; then
   mkdir -p $drc_out
fi
if [[ ! -d $drc_rgr ]]; then
   mkdir -p $drc_rgr
fi
if [[ ! -d $drc_tmp ]]; then
   mkdir -p $drc_tmp
fi
if [[ ! -d $drc_map ]]; then
   mkdir -p $drc_map
fi
if [[ ! -d $drc_log ]]; then
   mkdir -p $drc_log
fi
if [[ ! -d $drc_fix ]]; then
   mkdir -p $drc_fix
fi


#check the dependent software package


if [[ "$HOSTNAME" == cori* ]]; then
    module load nco
    module load ncl/6.4.0

else
   echo "please make sure the nco toolkit and ESMF_RegridWeightGen are in the searchable path"
fi


echo "------------------------------------------------------------------------------------------------------"

cd $outputpath/$caseid



# improve it using JSON in future
if [[ $ilamb_fields == 1 ]]; then 
   #-fldlist_monthly="ALT AR BTRAN CH4PROD DENIT EFLX_LH_TOT ELAI ER ESAI FAREA_BURNED \
   #- FCEV FCH4 FCH4TOCO2 FCOV FCTR FGEV FGR FGR12 FH2OSFC FINUNDATED FIRA FIRE FLDS FPG FPI \
   #- FPSN FROST_TABLE FSA FSAT FSDS FSH FSM FSNO FSR F_DENIT F_NIT GPP \
   #- GROSS_NMIN H2OSFC H2OSNO HR HTOP LAND_USE_FLUX LEAFC FROOTC NDEP_TO_SMINN NBP NEE NEP \
   #- NET_NMIN NFIX_TO_SMINN NPP Q2M QCHARGE QDRAI QOVER QRUNOFF QRGWL QSNOMELT \
   #- QSOIL QVEGE QVEGT RAIN RH2M SMIN_NO3 SMIN_NH4 SNOW SNOWDP SNOWICE SNOWLIQ SNOW_DEPTH \
   #- SNOW_SINKS SNOW_SOURCES SOMHR TG TSA TSAI TLAI TV QBOT TBOT \
   #- AGNPP FROOTC_ALLOC LEAFC_ALLOC WOODC_ALLOC WOOD_HARVESTC \
   #- CH4_SURF_AERE_SAT CH4_SURF_AERE_UNSAT CH4_SURF_DIFF_SAT \
   #- CH4_SURF_DIFF_UNSAT CH4_SURF_EBUL_SAT CONC_CH4_SAT \
   #- CONC_CH4_UNSAT FCH4_DFSAT MR TOTCOLCH4 ZWT_CH4_UNSAT \
   #- FSDSND FSDSNI FSDSVD FSDSVI \
   #- TWS VOLR WA ZWT_PERCH ZWT WIND COL_FIRE_CLOSS \
   #- F_DENIT_vr F_NIT_vr H2OSOI O_SCALAR SOILICE SOILLIQ SOILPSI TLAKE TSOI T_SCALAR W_SCALAR  \
   #- SOIL1N SOIL2N SOIL3N SOIL1C SOIL2C SOIL3C TOTVEGC TOTVEGN TOTECOSYSC TOTLITC TOTLITC_1m \
   #- TOTLITN_1m TOTSOMC TOTSOMC_1m TOTSOMN_1m CWDC PBOT"

  
   #ILAMB variables
   #-fldlist_lmon="ALT AR BTRAN CH4PROD DENIT EFLX_LH_TOT ELAI ER ESAI FAREA_BURNED \
   #- FCEV FCH4 FCH4TOCO2 FCOV FCTR FGEV FGR FGR12 FH2OSFC FINUNDATED FIRA FIRE FLDS FPG FPI \
   #- FPSN FROST_TABLE FSA FSAT FSDS FSH FSM FSNO FSR F_DENIT F_NIT GPP \
   #- GROSS_NMIN H2OSFC H2OSNO HR HTOP LAND_USE_FLUX LEAFC FROOTC NDEP_TO_SMINN NBP NEE NEP \
   #- NET_NMIN NFIX_TO_SMINN NPP Q2M QCHARGE QDRAI QOVER QRUNOFF QRGWL QSNOMELT \
   #- QSOIL QVEGE QVEGT RAIN RH2M SMIN_NO3 SMIN_NH4 SNOW SNOWDP SNOWICE SNOWLIQ SNOW_DEPTH \
   #- SNOW_SINKS SNOW_SOURCES SOMHR TG TSA TREFMXAV TREFMNAV TSAI TLAI TV QBOT TBOT \
   #- AGNPP FROOTC_ALLOC LEAFC_ALLOC WOODC_ALLOC WOOD_HARVESTC \
   #- CH4_SURF_AERE_SAT CH4_SURF_AERE_UNSAT CH4_SURF_DIFF_SAT \
   #- CH4_SURF_DIFF_UNSAT CH4_SURF_EBUL_SAT CONC_CH4_SAT \
   #- CONC_CH4_UNSAT FCH4_DFSAT MR TOTCOLCH4 ZWT_CH4_UNSAT \
   #- FSDSND FSDSNI FSDSVD FSDSVI \
   #- TWS VOLR WA ZWT_PERCH ZWT WIND COL_FIRE_CLOSS \
   #- F_DENIT_vr F_NIT_vr H2OSOI O_SCALAR SOILICE SOILLIQ SOILPSI TLAKE TSOI T_SCALAR W_SCALAR  \
   #- SOIL1N SOIL2N SOIL3N SOIL1C SOIL2C SOIL3C TOTVEGC TOTVEGN TOTECOSYSC TOTLITC TOTLITC_1m \
   #- TOTLITN_1m TOTSOMC TOTSOMC_1m TOTSOMN_1m CWDC PBOT"

   #LS3MIP variables
   #fldlist_lmon="SNOWLIQ MR SOILICE CWDC QRUNOFF SOILLIQ TOTPRODC SNOBCMCL TOTVEGC \
   #              LIVESTEMC GPP FAREA_BURNED SOIL2C CPOOL DEADSTEMC SOILC TSOI NEP \
   #              SOIL3C WOODC_ALLOC QVEGE PCT_CFT FROOTC_ALLOC SOILWATER_10CM FSNO \
   #              LIVECROOTC SNOWICE COL_FIRE_CLOSS LITR1C_TO_SOIL1C LITFALL TLAI \
   #              TOTLITC QSOIL SNOWDP DEADCROOTC LAND_USE_FLUX QOVER NPP QVEGT NBP \
   #              QSNWCPICE QINTR HR LITR2C_TO_SOIL2C PCT_NAT_PFT WOOD_HARVESTC LEAFC \
   #              PCT_LANDUNIT SOIL1C LITR3C_TO_SOIL3C GR QSNOMELT AR PCT_NAT_PCT LEAFC_ALLOC"


   #fldlist_lmon="GPP"

   #fldlist_amon="PRECSC PRECSL TREFHT TREFHTMN TREFHTMX RHREFHT CO2 SHFLX LHFLX QFLX PRECC PRECL FLDS FLNS FSDS FSNS"
   fldlist_amon="SFCO2 SFCO2_LND SFCO2_OCN SFCO2_FFF"
   #fldlist_amon="SHFLX LHFLX QFLX PRECC PRECL FLDS FLNS FSDS FSNS"
   #fldlist_amon="PRECSC PRECSL"
   #fldlist_amon="TREFHT TREFHTMN TREFHTMX RHREFHT"

   fldlist_annual=( )
else

   #fldlist_lmon="TREFMXAV TREFMNAV" 
   #fldlist_lmon="NEE"
   #fldlist_lmon="WT" 

   fldlist_amon="PRECSC PRECSL TREFHT TREFHTMN TREFHTMX RHREFHT SHFLX LHFLX QFLX PRECC PRECL FLDS FLNS FSDS FSNS SFCO2 SFCO2_LND SFCO2_OCN SFCO2_FFF"

   #all h0 files
   #fldlist_lmon=$caseid
   #-fldlist_monthly="ALT FCH4 FAREA_BURNED EFLX_LH_TOT FH2OSFC LAND_USE_FLUX H2OSOI NBP NEE \
   #- NPP Q2M RAIN SNOW SNOWDP SNOW_DEPTH TWS VOLR ZWT TSA RH2M QRUNOFF QOVER QDRAI FSNO TSOI \
   #- TLAI TSAI ELAI ESAI FSH FSDS FSA FIRE FIRA LEAFC TOTSOMC TOTSOMC_1m TOTVEGC TOTECOSYSC \
   #- TLAKE CWDC COL_FIRE_CLOSS WOOD_HARVESTC GPP ER NEP QSOIL QVEGE QVEGT QRGWL QSNOMELT"
   fldlist_annual=( )
fi


if [[ ! -z $more_vars ]]; then
   fldlist_monthly="${more_vars} ${fldlist_monthly}"
fi

# fixed field first
if [[ $add_fixed_flds == 1 ]]; then

   use_mynco=1
   if [[ $use_mynco == 1 ]]; then
      export NCO_PATH_OVERRIDE='No'
      myncremap=$SrcDir/tool/ncremap
   
   else
      myncremap=ncremap
   fi
   
   echo -e "${CR_GRN}Begin remapping for fixed fields...${CR_NUL}"

   firstyr=`printf "%04d" $((stryear+year_align))`
   
   echo "do mapping"

   which ncl
   
   ncks -O -v area,landfrac,TSA ${drc_inp}/*.clm2.h0.${firstyr}-01.nc ${drc_tmp}/area.nc 

   if [[ $use_softlnk == 1 ]]; then
      ln -sf ${drc_tmp}/area.nc ${drc_rgr}/area.nc

   else
      $myncremap -a aave -P sgs -s $src_grd -g $dst_grd -m ${drc_map}/map_lnd_${BASHPID}.nc --drc_out=${drc_rgr} \
                             ${drc_tmp}/area.nc > ${drc_log}/ncremap.lnd 2>&1
      if [[ $? != 0 ]]; then
         echo "Failed in the ncreamp, please check out ${drc_log}/ncremap.lnd"
         exit
      fi
      mapid=$BASHPID
      skip_genmap=$mapid
   fi

   ncks -v area ${drc_rgr}/area.nc  ${drc_rgr}/areacella.nc
   ncks -v landfrac ${drc_rgr}/area.nc  ${drc_rgr}/sftlf.nc

   #remove global attribute
   ncatted -h -a ,global,d,, ${drc_rgr}/areacella.nc
   ncatted -h -a ,global,d,,     ${drc_rgr}/sftlf.nc

   #area
   if [[ $use_softlnk == 1 ]]; then
       # the land model output area units is km2
       ncap2 -O -h -4 -v -s 'areacella=area*1.e6;' ${drc_rgr}/areacella.nc ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   else
       # in reammping is Sr unit
       ncap2 -O -h -4 -v -s 'areacella=area*6371000.*6371000.;' ${drc_rgr}/areacella.nc ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   fi
   ncatted -h -a units,areacella,o,c,'m2' ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   ncatted -h -a standard_name,areacella,o,c,'cell_area' ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   ncatted -h -a long_name,areacella,o,c,'Land grid-cell area' ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   ncatted -h -a comment,areacella,o,c,'from land model output, so it is masked out ocean part' ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   ncatted -h -a original_name,areacella,o,c,'area' ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"

   dtype=`nctypget areacella ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"`
   if [[ $dtype == 'NC_DOUBLE' ]]; then
       ncatted -h -a _FillValue,areacella,o,d,1.e20 ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   else
       ncatted -h -a _FillValue,areacella,o,f,1.e20 ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   fi

   if [[ $dtype == 'NC_DOUBLE' ]]; then
       ncatted -h -a missing_value,areacella,o,d,1.e20 ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   else
       ncatted -h -a missing_value,areacella,o,f,1.e20 ${drc_fix}/areacella"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   fi

   /bin/rm -f  ${drc_rgr}/areacella.nc

   ncap2 -O -h -4 -v -s 'sftlf=landfrac*100;' ${drc_rgr}/sftlf.nc ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   ncatted -h -a standard_name,sftlf,o,c,'Land Area Fraction' ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"

   dtype=`nctypget sftlf ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"`
   if [[ $dtype == 'NC_DOUBLE' ]]; then
       ncatted -h -a _FillValue,sftlf,o,d,1.e20 ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   else
       ncatted -h -a _FillValue,sftlf,o,f,1.e20 ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   fi

   if [[ $dtype == 'NC_DOUBLE' ]]; then
       ncatted -h -a missing_value,sftlf,o,d,1.e20 ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   else
       ncatted -h -a missing_value,sftlf,o,f,1.e20 ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   fi

   ncatted -h -a units,sftlf,o,c,'%' ${drc_fix}/sftlf"_fx_"${model}"_"${experiment}"_r0i0p0.nc"
   /bin/rm -f  ${drc_rgr}/sftlf.nc 
   /bin/rm -f  ${drc_rgr}/area.nc 

   exit
fi


#set the directory

DATA=$outputpath/$caseid
drc_inp=$caseidpath
drc_out=${DATA}/org # Native grid output directory
drc_rgr=${DATA}/rgr # Regridded output directory
drc_tmp=${DATA}/tmp # Temporary/intermediate-file directory
drc_map=${DATA}/map # Map directory
drc_log=${DATA}/log # Log directory

if [[ ! -d $drc_out/lnd ]]; then
   mkdir -p $drc_out/lnd
fi
if [[ ! -d $drc_out/atm ]]; then
   mkdir -p $drc_out/atm
fi
if [[ ! -d $drc_rgr/lnd ]]; then
   mkdir -p $drc_rgr/lnd
fi
if [[ ! -d $drc_rgr/atm ]]; then
   mkdir -p $drc_rgr/atm
fi
if [[ ! -d $drc_tmp ]]; then
   mkdir -p $drc_tmp
fi
if [[ ! -d $drc_map ]]; then
   mkdir -p $drc_map
fi
if [[ ! -d $drc_log ]]; then
   mkdir -p $drc_log
fi



# time-serialization
if [[ $no_gen_ts == 0 ]]; then
   if [ ! -z "$fldlist_lmon" ]; then 
      drc_out=${DATA}/org/lnd
      fldlist_monthly=$fldlist_lmon
      comp="clm2"
      if [[ $use_ncclimo == 1 ]]; then
         source $SrcDir/tool/run_gen_ts.bash
      else
         source $SrcDir/tool/run_reshaper.bash
      fi
   fi

   if [ ! -z "$fldlist_amon" ]; then 
      drc_out=${DATA}/org/atm
      fldlist_monthly=$fldlist_amon
      comp="cam"
      if [[ ! -d $drc_out ]]; then
         mkdir -p $drc_out
      fi
      if [[ $use_ncclimo == 1 ]]; then
         source $SrcDir/tool/run_gen_ts.bash
      else
         source $SrcDir/tool/run_reshaper.bash
      fi
   fi
fi

# remapping
if [[ $skip_remap == 0 ]]; then
   # use ncremap
   if [[ $use_ncremap == 1 ]]; then

      #land 
      if [ ! -z "$fldlist_lmon" ]; then 
         drc_out=${DATA}/org/lnd
         drc_rgr=${DATA}/rgr/lnd
         fldlist_monthly=$fldlist_lmon

         if [[ $fldlist_lmon == $caseid ]]; then
            cd $drc_out && ln -sf $lndpath/*.nc .
         fi
         comp="lnd"
         source $SrcDir/tool/run_ncremap.bash
      fi

      #atmos
      if [ ! -z "$fldlist_amon" ]; then 
         drc_out=${DATA}/org/atm
         drc_rgr=${DATA}/rgr/atm
         fldlist_monthly=$fldlist_amon
         comp="atm"
         source $SrcDir/tool/run_ncremap.bash
      fi
   fi

   # use scipy spare matrix first
   if [[ $use_cremap3 == 1 ]]; then
      #
      #source $SrcDir/conv_remap3.bash
      echo "will be added in near future"
      exit
   fi
else
   #-if [[ $convert_to_cmip == 1 ]]; then
   if [[ $use_softlnk == 1 ]]; then

      if [ ! -z "$fldlist_lmon" ]; then
         drc_out=${DATA}/org/lnd
         drc_rgr=${DATA}/rgr/lnd
      fi 

      if [ ! -z "$fldlist_amon" ]; then 
         drc_out=${DATA}/org/atm
         drc_rgr=${DATA}/rgr/atm
      fi 

      cd $drc_rgr; ln -sf $drc_out/*.nc .

   else
      echo "No remapped or linked files for cmorization"
   fi
fi

# cmorization (converting to CMIP format)
if [[ $convert_to_cmip == 1 ]]; then

   #land 
   if [ ! -z "$fldlist_lmon" ]; then
      /bin/cp -f $SrcDir/tool/clm_to_mip $outputpath/$caseid/rgr/lnd
      cd $outputpath/$caseid/rgr/lnd
      echo clm_to_mip ${model} ${experiment} ${year_range}


      if [[ $skip_rename == 0 ]]; then
         #renaming
         if [[ $use_pyreshaper == 1 ]]; then
            rename ${stryear} .${stryear} *${stryear}*.nc
         fi

         if [[ $use_ncclimo == 1 ]]; then
            # change var_YYYY01_YYYY12.nc to ncclimo.var.YYYY01_YYYY12.nc
            rename _${stryear} .monthly.${stryear} *${stryear}*.nc

            for rgrf in *${stryear}*.nc; do
                if [[ $rgrf != ncclimo* ]]; then
                   #/bin/mv $rgrf ncclimo.$rgrf
                   # change to nc3 format as the fillvalue cannot be changed in nc4
                   ncks -3 $rgrf ncclimo.$rgrf
                fi
            done
         fi
      fi

      ./clm_to_mip ${model} ${experiment} ${year_range}

      if [[ $year_align != 0 ]]; then
         cd $outputpath/$caseid/rgr/lnd/CMOR
         time_shift $year_align $outputpath/$caseid/rgr/lnd/CMOR
      fi
   fi

   #atmos
   if [ ! -z "$fldlist_amon" ]; then
     /bin/cp -f $SrcDir/tool/clm_to_mip $outputpath/$caseid/rgr/atm
      cd $outputpath/$caseid/rgr/atm
      echo clm_to_mip ${model} ${experiment} ${year_range}

      if [[ $skip_rename == 0 ]]; then
         #renaming
         if [[ $use_pyreshaper == 1 ]]; then
            rename ${stryear} .${stryear} *${stryear}*.nc
         fi

         if [[ $use_ncclimo == 1 ]]; then
            # change var_YYYY01_YYYY12.nc to ncclimo.var.YYYY01_YYYY12.nc
            rename _${stryear} .monthly.${stryear} *${stryear}*.nc

            for rgrf in *${stryear}*.nc; do
                if [[ $rgrf != ncclimo* ]]; then
                   /bin/mv $rgrf ncclimo.$rgrf
                fi
            done
         fi
      fi

      ./clm_to_mip ${model} ${experiment} ${year_range}

      if [[ $year_align != 0 ]]; then
         cd $outputpath/$caseid/rgr/atm/CMOR
         time_shift $year_align $outputpath/$caseid/rgr/atm/CMOR
      fi
   fi


fi


exit 0
